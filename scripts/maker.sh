#!/bin/bash
# I see you have found this script. Yes, THIS is the place to edit the Makefile :)
# NOTE: Slices are read from scripts/maker.slices, all: will be applied for all environments, environment specifics can be added.
#       If maker.slices is missing no slice option will be generated.

SCRIPT="${BASH_SOURCE[0]}"
DIR="$( cd "$( dirname "${SCRIPT}" )" >/dev/null 2>&1 && pwd )"
source "$DIR/project_env.sh"

generate_make_targets() {
	PROJECTS="$PROJECTS $1"
	ALL=""
	for a in "init" "plan" "apply" "bash"
	do
		printf "%s-%s:\n\t./scripts/terraform-run.sh -s %s -e %s -c %s -a %s\n\n" "$1" "$a" "$s" "$ENVIRONMENT" "$CUSTOMER" "$a" >> Makefile.new
		if [ "$a" != "bash" ];
		then
			ALL="${ALL} ${1}-${a}"
		fi
	done
	printf "%s-%s-all: %s\n\n" "${1}" "${s}" "${ALL}" >> Makefile.new
}

set -e
cat > Makefile.new <<EOF
# Makefile, autogenerated by $0
# DO NOT EDIT THIS DIRECTLY, EDIT $0 INSTEAD!
.PHONY: help make

make:
	@echo Regenerating Makefile
	./scripts/maker.sh

EOF

PROJECTS=""

# Check for slices
SLICEFILE=${DIR}/maker.slices
if [ -r $SLICEFILE ]; then
	echo Slice mode activated. Reading $SLICEFILE for slices and environment specific additions.
	ALLSLICE=$(grep ^all: $SLICEFILE | cut -f2- -d':')
	echo Slices for all enviroments: $ALLSLICE
fi

for p in `gcloud projects list --format="value(project_id)" | grep ^ssono-${PROJECT} | sort`
do
	CUSTOMER=`echo $p | cut -f3 -d'-'`
	ENVIRONMENT=`echo $p | cut -f4 -d'-'`
	ENVSLICE=$(grep "^$ENVIRONMENT:" "$SLICEFILE" | cut -f2- -d':')
	CUSTSLICE=$(grep "^$CUSTOMER:" "$SLICEFILE" | cut -f2- -d':')
	SLICES="$ALLSLICE $ENVSLICE $CUSTSLICE"
	if [ -n "$SLICES" ]; then
		for s in $SLICES
		do
			generate_make_targets "${p}-${s}"
		done
	else
		generate_make_targets "${p}"
	fi
done

# Due to bash we might need escaping here, but due to Make we also need escaping certain bits. Ugh.
cat >> Makefile.new <<EOF
PROJECTS := $PROJECTS
help:
	@echo This makefile is autogenerated by $0 and is just to easily make targets.
	@echo Valid targets for -init -plan -apply -all and -bash:
	@bash -c 'for k in $PROJECTS ; do echo -e "\t\$\$k" ; done'

EOF

mv Makefile.new Makefile

